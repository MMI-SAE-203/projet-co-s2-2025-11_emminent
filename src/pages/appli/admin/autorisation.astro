---
import Layout from "../../../layouts/Layoutappli.astro";
import { createClient } from "@supabase/supabase-js";
import OpenAI from "openai";
import pdfParse from "pdf-parse";
import crypto from "crypto";

export const prerender = false;

const locals = Astro.locals;
let message = "";
let emails = [];

if (!locals.pb.authStore.isSuperuser) {
    return Astro.redirect("/appli/login");
}

if (Astro.request.method === "POST") {
    const form = await Astro.request.formData();

    // üìß EMAIL IMPORT
    const newEmailsRaw = form.get("emails");
    if (typeof newEmailsRaw === "string" && newEmailsRaw.trim() !== "") {
        try {
            const newEmails = newEmailsRaw
                .split(/[\s,;]+/)
                .map((e) => e.trim().toLowerCase())
                .filter(Boolean);

            for (const email of newEmails) {
                try {
                    // v√©rifier si l'email existe d√©j√†
                    try {
                        await locals.pb
                            .collection("users")
                            .getFirstListItem(`email = '${email}'`);
                        console.log("Utilisateur d√©j√† existant :", email);
                        continue;
                    } catch {
                        // utilisateur non trouv√©, on peut le cr√©er
                    }

                    const password = "temperature";

                    const [nomBrut] = email.split("@");
                    const [prenom, nom] = nomBrut.split(".");
                    const nomComplet = `${prenom?.charAt(0).toUpperCase() + prenom?.slice(1)} ${nom?.toUpperCase()}`;

                    await locals.pb.collection("users").create({
                        email,
                        password,
                        passwordConfirm: password,
                        emailVisibility: true,
                        nom: nomComplet || "Import√©",
                    });
                } catch (err) {
                    console.error(
                        "Erreur cr√©ation utilisateur :",
                        email,
                        err?.response?.data || err,
                    );
                }
            }

            message = "‚úÖ Importation termin√©e.";
        } catch (err) {
            message = "‚ùå Erreur pendant l'import.";
            console.error("Erreur bloc try principal :", err);
        }
    }

    // üìÑ PDF UPLOAD
    if (form.has("upload_pdf")) {
        try {
            const file = form.get("pdf");
            const arrayBuffer = await file.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            const data = await pdfParse(buffer);
            const text = data.text;

            const chunks = text.match(/(.|\s){1,500}/g) || [];

            const supabase = createClient(
                import.meta.env.SUPABASE_URL,
                import.meta.env.SUPABASE_KEY,
            );
            const openai = new OpenAI({
                apiKey: import.meta.env.OPENAI_API_KEY,
            });

            for (const chunk of chunks) {
                const embeddingResponse = await openai.embeddings.create({
                    model: "text-embedding-3-small",
                    input: chunk,
                });
                const embedding = embeddingResponse.data[0].embedding;

                await supabase.from("documents").insert({
                    contenu: chunk,
                    source: file.name,
                    embedding,
                });
            }

            message = "‚úÖ PDF index√© avec succ√®s.";
        } catch (err) {
            console.error("‚ùå Erreur PDF :", err);
            message = "‚ùå Erreur lors de l'indexation du PDF.";
        }
    }
}

try {
    const list = await locals.pb.collection("users").getFullList({
        sort: "-created",
    });
    emails = list.map((u) => u.email);
} catch (e) {
    console.error("Erreur de r√©cup√©ration des emails utilisateurs", e);
}
---

<Layout pageTitle="Gestion des autorisations">
    <main class="max-w-2xl mx-auto py-12 text-white">
        <h1 class="text-4xl font-bold mb-6">
            Importation des e-mails autoris√©s
        </h1>

        {message && <p class="text-green-400 mb-4">{message}</p>}

        <form method="POST" class="space-y-4">
            <label class="block">
                <span class="block mb-1">
                    Collez une liste d'adresses e-mail s√©par√©es par des
                    virgules, espaces ou retours √† la ligne :
                </span>
                <textarea
                    name="emails"
                    rows="6"
                    required
                    class="w-full px-4 py-2 bg-gray-800 border border-gray-600 rounded text-white"
                ></textarea>
            </label>

            <input
                type="submit"
                value="Importer"
                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded cursor-pointer"
            />
        </form>

        <hr class="my-8 border-gray-600" />

        <h2 class="text-2xl font-semibold mb-4">
            Liste actuelle des e-mails autoris√©s
        </h2>
        <ul class="list-disc list-inside space-y-1 text-sm">
            {emails.map((email) => <li>{email}</li>)}
        </ul>
        <hr class="my-12 border-gray-600" />

        <h2 class="text-2xl font-semibold mb-4 text-white">
            Uploader un document PDF pour le RAG
        </h2>

        <form method="POST" enctype="multipart/form-data" class="space-y-4">
            <label class="block">
                <span class="block mb-1 text-white"
                    >S√©lectionnez un fichier PDF :</span
                >
                <input
                    type="file"
                    name="pdf"
                    accept="application/pdf"
                    required
                    class="w-full text-white bg-gray-800 border border-gray-600 rounded px-4 py-2"
                />
            </label>

            <input
                type="submit"
                name="upload_pdf"
                value="Uploader et indexer"
                class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded cursor-pointer"
            />
        </form>
    </main>
</Layout>
