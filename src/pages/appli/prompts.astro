---
import Layout from "../../layouts/Layoutappli.astro";
import { getPrompts } from "../../../backend/backend.mjs";
import PromptCard from "../../components/PromptCard.astro";

const prompts = await getPrompts();

const topPrompts = [...prompts]
    .filter((p) => p.likes > 0)
    .sort((a, b) => b.likes - a.likes)
    .slice(0, 10);

const domaines = [...new Set(prompts.map((p) => p.domaine))];
const themes = [...new Set(prompts.map((p) => p.theme))];
---

<Layout>
    <main class="max-w-7xl mx-auto px-6 py-14 text-white">
        <h1 class="text-4xl font-bold text-[#00C8E9] text-center mb-10">
            Galerie de prompts MMI
        </h1>

        <div class="text-center mb-10">
            <a
                href="/appli/ajouter"
                class="bg-[#00C8E9] hover:bg-[#00AFC1] text-black font-bold px-6 py-3 rounded-full transition"
            >
                ➕ Ajouter un prompt
            </a>
        </div>

        {
            topPrompts.length > 0 && (
                <div class="mb-16">
                    <h2 class="text-2xl font-semibold text-[#00C8E9] mb-6 text-center">
                         Prompts les plus likés
                    </h2>

                    <div class="relative max-w-3xl mx-auto">
                        <div
                            id="carousel-container"
                            class="overflow-hidden rounded-xl shadow-lg min-h-[220px]"
                        >
                            {topPrompts.map((p, i) => (
                                <div
                                    class="carousel-item bg-[#1E1B3A] p-6 rounded-xl transition-all duration-300"
                                    style={`display: ${i === 0 ? "block" : "none"}`}
                                    data-index={i}
                                >
                                    <h3 class="text-lg font-bold text-[#00C8E9]">
                                        {p.theme}
                                    </h3>
                                    <p class="text-gray-300 text-sm my-2">
                                        {p.contenu}
                                    </p>
                                    <div class="flex justify-between items-center mt-4">
                                        <button
                                            class="bg-[#00C8E9] hover:bg-[#00AFC1] text-black font-semibold px-4 py-2 rounded-full transition text-sm"
                                            onClick={`navigator.clipboard.writeText(\`${p.contenu}\`)`}
                                        >
                                            Copier
                                        </button>
                                        <span class="flex items-center gap-1 text-sm text-gray-400">
                                            <img src="../../../src/assets/icons/coeur.png" alt="like" class="w-4 h-4" />
                                            {p.likes}
                                        </span>
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div class="flex justify-between mt-4">
                            <button
                                id="prev-btn"
                                class="text-[#00C8E9] text-xl"
                            >
                                ←
                            </button>
                            <button
                                id="next-btn"
                                class="text-[#00C8E9] text-xl"
                            >
                                →
                            </button>
                        </div>
                    </div>
                </div>
            )
        }

        <!-- FILTRES -->
        <div class="flex flex-col md:flex-row gap-4 justify-center mb-10">
            <select
                id="domaine-filter"
                class="bg-[#1E1B3A] border border-[#52289D] px-4 py-2 rounded-full text-white"
            >
                <option value="">Tous les domaines</option>
                {domaines.map((d) => <option value={d}>{d}</option>)}
            </select>
            <select
                id="theme-filter"
                class="bg-[#1E1B3A] border border-[#52289D] px-4 py-2 rounded-full text-white"
            >
                <option value="">Tous les thèmes</option>
                {themes.map((t) => <option value={t}>{t}</option>)}
            </select>
        </div>

        <!-- PROMPTS -->
        <div id="prompt-list" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {prompts.map((p) => <PromptCard prompt={p} />)}
        </div>

        <!-- JS -->
        <script type="module" is:inline>
            // Filtres
            const domaineFilter = document.getElementById("domaine-filter");
            const themeFilter = document.getElementById("theme-filter");
            const promptCards = document.querySelectorAll(
                "#prompt-list [data-domaine][data-theme]",
            );

            function filterPrompts() {
                const domaine = domaineFilter.value;
                const theme = themeFilter.value;

                promptCards.forEach((card) => {
                    const matchD = !domaine || card.dataset.domaine === domaine;
                    const matchT = !theme || card.dataset.theme === theme;
                    card.style.display = matchD && matchT ? "block" : "none";
                });
            }

            domaineFilter.addEventListener("change", filterPrompts);
            themeFilter.addEventListener("change", filterPrompts);

            // Carousel
            
  // Auto-défilement du carousel
  const items = document.querySelectorAll(".carousel-item");
  const nextBtn = document.getElementById("next-btn");
  const prevBtn = document.getElementById("prev-btn");

  let currentIndex = 0;
  let interval = null;
  const duration = 4000; // 4 secondes

  const showItem = (index) => {
    items.forEach((item, i) => {
      item.style.display = i === index ? "block" : "none";
    });
  };

  const startCarousel = () => {
    interval = setInterval(() => {
      currentIndex = (currentIndex + 1) % items.length;
      showItem(currentIndex);
    }, duration);
  };

  const stopCarousel = () => {
    clearInterval(interval);
  };

  nextBtn?.addEventListener("click", () => {
    stopCarousel();
    currentIndex = (currentIndex + 1) % items.length;
    showItem(currentIndex);
    startCarousel();
  });

  prevBtn?.addEventListener("click", () => {
    stopCarousel();
    currentIndex = (currentIndex - 1 + items.length) % items.length;
    showItem(currentIndex);
    startCarousel();
  });

  // Pause au survol du container
  const container = document.getElementById("carousel-container");
  container?.addEventListener("mouseenter", stopCarousel);
  container?.addEventListener("mouseleave", startCarousel);

  showItem(currentIndex);
  startCarousel();



            // Vote exclusif
            window.votePrompt = async function (btn, type) {
                const card = btn.closest("[data-id]");
                const id = card.dataset.id;
                const voteKey = "voted-" + id;
                const previous = localStorage.getItem(voteKey);

                if (previous === type) return;

                const formData = new FormData();
                formData.append("id", id);
                formData.append("type", type);

                const res = await fetch("/api/vote", {
                    method: "POST",
                    body: formData,
                });

                const json = await res.json();
                if (json.success) {
                    localStorage.setItem(voteKey, type);

                    const likeBtn =
                        card.querySelector("img[alt='like']").parentElement;
                    const dislikeBtn =
                        card.querySelector("img[alt='dislike']").parentElement;

                    likeBtn.querySelector("span").innerText = json.likes;
                    dislikeBtn.querySelector("span").innerText = json.dislikes;

                    likeBtn.classList.remove("bg-[#00C8E9]", "bg-white");
                    dislikeBtn.classList.remove("bg-[#00C8E9]", "bg-white");

                    if (type === "like") {
                        likeBtn.classList.add("bg-[#00C8E9]");
                        dislikeBtn.classList.add("bg-white");
                    } else {
                        dislikeBtn.classList.add("bg-[#00C8E9]");
                        likeBtn.classList.add("bg-white");
                    }
                }
            };

            // Appliquer l’état des votes au chargement
            window.addEventListener("DOMContentLoaded", () => {
                document.querySelectorAll("[data-id]").forEach((card) => {
                    const id = card.dataset.id;
                    const vote = localStorage.getItem("voted-" + id);

                    const likeBtn =
                        card.querySelector("img[alt='like']").parentElement;
                    const dislikeBtn =
                        card.querySelector("img[alt='dislike']").parentElement;

                    if (vote === "like") {
                        likeBtn.classList.add("bg-[#00C8E9]");
                        dislikeBtn.classList.add("bg-white");
                    } else if (vote === "dislike") {
                        dislikeBtn.classList.add("bg-[#00C8E9]");
                        likeBtn.classList.add("bg-white");
                    }
                });
            });
        </script>
    </main>
</Layout>
